{"version":3,"sources":["../src/index.js"],"names":["LocalStrategy","require","Strategy","app","server","http","createServer","io","use","bodyParser","json","limit","config","bodyLimit","passport","initialize","Account","usernameField","passwordField","authenticate","serializeUser","deserializeUser","routes","get","req","res","message","typingUsers","on","client","console","log","name","description","newChannel","Channel","save","err","channel","emit","id","userName","channelId","messageBody","userId","userAvatar","userAvatarColor","newMessage","Message","msg","timeStamp","listen","port","address","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport passport from 'passport';\nimport socket from 'socket.io';\nimport Message from './model/message';\nimport Channel from './model/channel';\n\nconst LocalStrategy  = require('passport-local').Strategy;\n\nimport config from './config';\nimport routes from './routes';\n\nlet app = express();\napp.server = http.createServer(app);\nlet io = socket(app.server);\n\n//middleware\n//parse application/json\napp.use(bodyParser.json({\n  limit: config.bodyLimit\n}));\n\n//passport config\napp.use(passport.initialize());\nlet Account = require('./model/account');\npassport.use(new LocalStrategy({\n  usernameField: 'email',\n  passwordField: 'password'\n},\n  Account.authenticate()\n));\npassport.serializeUser(Account.serializeUser());\npassport.deserializeUser(Account.deserializeUser());\n\n//api routes v1\napp.use('/v1', routes);\n\n// Base URL test endpoint to see if API is running\napp.get('/', (req, res) => {\n  res.json({ message: 'Chat API is ALIVE!' })\n});\n\n/*||||||||||||||||SOCKET|||||||||||||||||||||||*/\n//Listen for connection\nvar typingUsers = {};\n\nio.on('connection', function(client) {\n  console.log('a user connected');\n  //Listens for a new chat message\n  client.on('newChannel', function(name, description) {\n    //Create channel\n    let newChannel = new Channel({\n    name: name,\n    description: description,\n  });\n    //Save it to database\n    newChannel.save(function(err, channel){\n      //Send message to those connected in the room\n      console.log('new channel created');\n      io.emit(\"channelCreated\", channel.name, channel.description, channel.id);\n    });\n  });\n\n  //Listens for user typing.\n  client.on(\"startType\", function(userName, channelId){\n    console.log(\"User \" + userName + \" is writing a message...\");\n    typingUsers[userName] = channelId;\n    io.emit(\"userTypingUpdate\", typingUsers, channelId);\n  });\n\n  client.on(\"stopType\", function(userName){\n    console.log(\"User \" + userName + \" has stopped writing a message...\");\n    delete typingUsers[userName];\n    io.emit(\"userTypingUpdate\", typingUsers);\n  });\n\n  //Listens for a new chat message\n  client.on('newMessage', function(messageBody, userId, channelId, userName, userAvatar, userAvatarColor) {\n    //Create message\n\n    console.log(messageBody);\n\n    let newMessage = new Message({\n    messageBody: messageBody,\n    userId: userId,\n    channelId: channelId,\n    userName: userName,\n    userAvatar: userAvatar,\n    userAvatarColor: userAvatarColor\n  });\n    //Save it to database\n    newMessage.save(function(err, msg){\n      //Send message to those connected in the room\n      console.log('new message sent');\n\n      io.emit(\"messageCreated\",  msg.messageBody, msg.userId, msg.channelId, msg.userName, msg.userAvatar, msg.userAvatarColor, msg.id, msg.timeStamp);\n    });\n  });\n});\n/*||||||||||||||||||||END SOCKETS||||||||||||||||||*/\n\napp.server.listen(config.port);\nconsole.log(`Started on port ${app.server.address().port}`);\n\nmodule.exports = {\n  app,\n  io\n}\n"]}